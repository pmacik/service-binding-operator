name: PR checks

on:
  pull_request:
    branches:
      - master

env:
  GO111MODULE: on
  SDK_VERSION: "1.3.0"
  OPM_VERSION: "1.15.2"
  MINIKUBE_WANTUPDATENOTIFICATION: false
  MINIKUBE_WANTREPORTERRORPROMPT: false
  K8S_VERSION: "1.19.2"
  MINIKUBE_VERSION: "1.15.1"
  TEST_ACCEPTANCE_CLI: "kubectl"
  CONTAINER_RUNTIME: "podman"
  TEST_RESULTS: "out/acceptance-tests"

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.15.6"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Run linters
        run: make lint

  unit:
    name: Unit Tests with Code coverage
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.15.6"

      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Unit Tests with Code Coverage
        run: |
          make test

      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v1
        with:
          file: cover.out
          verbose: true
          fail_ci_if_error: true

  acceptance:
    name: Acceptance Tests with Kubernetes and using OLM
    runs-on: ubuntu-20.04

    env:
      EXTRA_BEHAVE_ARGS: "--tags=~@knative --tags=~@openshift --tags=~@examples"
      TEST_RUN: Acceptance_tests_Kubernetes_with_OLM

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.15.6"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Setup-cli
        uses: ./.github/actions/setup-cli

      - name: Wait for push
        uses: lewagon/wait-on-check-action@v0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: "Push operator images (PR)"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 15

      - name: Acceptance tests
        timeout-minutes: 60
        run: |
          TAG=pr-$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")-${GITHUB_SHA:0:8}
          export OPERATOR_IMAGE_REF=quay.io/pmacik/sbo-pr-checks:${TAG}
          export OPERATOR_BUNDLE_IMAGE_REF=${OPERATOR_IMAGE_REF}-bundle
          export OPERATOR_INDEX_IMAGE_REF=${OPERATOR_IMAGE_REF}-index
          export CATSRC_NAME=${TAG}

          make SKIP_REGISTRY_LOGIN=true -o registry-login test-acceptance-with-bundle

      - name: Collect Kube resources
        continue-on-error: true
        run: |
          mkdir -p ${TEST_RESULTS}
          for res in pods deployments; do
            for ns in operators olm; do
              kubectl get $res -n $ns --ignore-not-found=true -o yaml > ${TEST_RESULTS}/${res}.${ns}.yaml
            done
          done
          kubectl get catsrc -n olm -o yaml > ${TEST_RESULTS}/catalogsources.yaml
          kubectl get subscription -n operators -o yaml > ${TEST_RESULTS}/subscriptions.yaml
        if: always()

      - name: Collect SBO log
        continue-on-error: true
        run: |
          mkdir -p ${TEST_RESULTS}
          kubectl logs $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n operators | tail -1) -n operators > ${TEST_RESULTS}/sbo.log
        if: always()

      # - name: Setup Testspace
      #   uses: testspace-com/setup-testspace@v1
      #   with:
      #     domain: ${{ github.repository_owner }}
      #   if: always()

      # - name: Publish tests results to Testspace
      #   run: |
      #     testspace [${{ env.TEST_RUN }}]${{ env.TEST_RESULTS }}/TEST*.xml
      #   if: always()

      - uses: actions/upload-artifact@v2
        with:
          name: kubernetes-with-olm-test-results
          path: ${{ env.TEST_RESULTS }}
        if: always()

  acceptance_without_olm:
    name: Acceptance tests running on Kubernetes without using OLM
    runs-on: ubuntu-20.04

    env:
      EXTRA_BEHAVE_ARGS: "--tags=~@knative --tags=~@openshift --tags=~@olm"
      TEST_RUN: Acceptance_tests_Kubernetes_without_OLM
      UMOCI_VERSION: "0.4.5"

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.15.6"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Set up CLI
        uses: ./.github/actions/setup-cli

      - name: Setup umoci cli
        run: |
          curl -Lo umoci https://github.com/opencontainers/umoci/releases/download/v${UMOCI_VERSION}/umoci.amd64
          chmod +x umoci
          mv -v umoci $GITHUB_WORKSPACE/bin/

      - name: Wait for push
        uses: lewagon/wait-on-check-action@master
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: "Push operator images (PR)"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 15

      - name: Acceptance tests against vanilla k8s without OLM
        timeout-minutes: 60
        run: |
          TAG=pr-$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")-${GITHUB_SHA:0:8}
          export OPERATOR_IMAGE_REF=quay.io/pmacik/sbo-pr-checks:${TAG}
          export OPERATOR_BUNDLE_IMAGE_REF=${OPERATOR_IMAGE_REF}-bundle
          export OPERATOR_INDEX_IMAGE_REF=${OPERATOR_IMAGE_REF}-index

          eval $(minikube docker-env)
          make release-manifests
          kubectl apply -f out/release.yaml
          make TEST_ACCEPTANCE_START_SBO=remote test-acceptance

      - name: Collect Kube resources
        continue-on-error: true
        run: |
          mkdir -p ${TEST_RESULTS}
          for res in pods deployments; do
            for ns in operators olm; do
              kubectl get $res -n $ns --ignore-not-found=true -o yaml > ${TEST_RESULTS}/${res}.${ns}.yaml
            done
          done
        if: always()

      - name: Collect SBO log
        continue-on-error: true
        run: |
          mkdir -p ${TEST_RESULTS}
          kubectl logs $(kubectl get pods --no-headers -o custom-columns=":metadata.name" -n operators | tail -1) -n operators > ${TEST_RESULTS}/sbo.log
        if: always()

      # - name: Setup Testspace
      #   uses: testspace-com/setup-testspace@v1
      #   with:
      #     domain: ${{ github.repository_owner }}
      #   if: always()

      # - name: Publish tests results to Testspace
      #   run: |
      #     testspace [${{ env.TEST_RUN }}]${{ env.TEST_RESULTS }}/TEST*.xml
      #   if: always()

      - uses: actions/upload-artifact@v2
        with:
          name: kubernetes-without-olm-test-results
          path: ${{ env.TEST_RESULTS }}
        if: always()
