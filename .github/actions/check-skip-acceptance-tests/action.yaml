# action.yml
name: 'Check if acceptance tests can be skipped'
description: 'Check if acceptance tests can be skipped based on the PR content'
outputs:
  can_skip:
    description: "true if acceptance teststests can be skipped"
    value: ${{ steps.check-skip-test.outputs.result }}
runs:
  using: "composite"
  steps:
    - id: check-skip-test
      uses: actions/github-script@v6.1.0
      with:
        result-encoding: string
        script: |
          const result = await github.rest.pulls.listFiles({
            owner: context.payload.repository.owner.login,
            repo: context.payload.repository.name,
            pull_number: context.payload.number,
            per_page: 100
          })

          let fileSet = result.data.filter(f => 
              f.filename.startsWith(".github/actions/collect-kube-resources") ||
              f.filename.startsWith(".github/actions/setup-cli") ||
              f.filename.startsWith(".github/actions/setup-podman") ||
              f.filename.startsWith("apis") ||
              f.filename.startsWith("build") ||
              f.filename.startsWith("config") ||
              f.filename.startsWith("controllers") ||
              f.filename.startsWith("hack/get-test-namespace") ||
              f.filename.startsWith("hack/remove-sbr-finalizers.sh") ||
              f.filename.startsWith("hack/test-cleanup.sh") ||
              f.filename.startsWith("controllers") ||
              f.filename.startsWith("make/acceptance.mk") ||
              f.filename.startsWith("make/build.mk") ||
              f.filename.startsWith("make/common.mk") ||
              f.filename.startsWith("make/release.mk") ||
              f.filename.startsWith("make/version.mk") ||
              f.filename.startsWith("pkg") ||
              f.filename.startsWith("tools") ||
              f.filename.startsWith("vendor") ||
              f.filename.startsWith("go.mod") ||
              f.filename.startsWith("go.sum") ||
              f.filename.startsWith("install.sh") ||
              f.filename.startsWith("main.go")
            )

          fileSet.forEach(i => console.log(i.status + ":" + i.filename))

          const canSkip = fileSet.length == 0
          console.log(canSkip)
          return canSkip

